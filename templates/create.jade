link(rel="import" href="/bower_components/polymer/polymer.html")

dom-module(id="#{name}-create")
  template
    style.
      :host {
        display: block;
        padding: 1em;
      }
      
      paper-button {
        margin-top: 1em;
      }

    //- Request for this particular resource.
    iron-ajax#req(
      content-type="application/json"
      on-response="created_callback"
    )
    
    //- For each writable key, check if it
    //- has any associations and create ajax
    //- requests for each one.
    - each value, key in writable_attributes
      - if (value.model || value.collection)
        iron-ajax(
          auto="{{xhr_headers}}"
          url="#{api_root}/#{value.model || value.collection}"
          headers="{{xhr_headers}}"
          content-type="application/json"
          last-response="{{related_#{value.model || value.collection}}}"
        )
    
    //- Create the form.
    paper-material(elevation="1")
      h1 Create a new #{name}
      
      form#form(
        is="iron-form"
        action="#{api_root}/#{name}"
        method="post"
        headers="[[xhr_headers]]"
        request="{{request_element}}"
      )
        - each value, key in writable_attributes
          //- If it's an assocation, we want to create 
          //- a searchable select field to help the user
          //- to find the right record.
          //- If it's an enum, make another select field
          //- where the options are the enum values.
          //- Otherwise, just create an input with a safe "type"
          - if (value.model || value.collection)
            paper-select(
              id="#{key}"
              name="#{key}" 
              label="Select #{key}"
              value-field="id"
              label-field="name"
              multiple=!!value.collection
              on-input-changed="_filter_options"
              relation="related_#{value.model || value.collection}"
              required=!!value.required
            )
          - else if (value.enum)
            paper-dropdown-menu(
              label="#{key}"
              id="#{key}"
              name="#{key}"
              placeholder="Select #{key}"
              noink
              required=!!value.required
            )
              paper-menu.dropdown-content
                - each option_value, _ in value.enum
                  paper-item(value=option_value)= option_value
          - else
            paper-input(
              id="#{key}"
              name="#{key}"
              label="#{key}"
              type="#{type_to_html_input_type(value.type)}"
              required=!!value.required
              min=value.minLength || value.min
              max=value.maxLength || value.max
            )

        paper-button(raised on-click="_submit_new") Create new #{name}
      
  script.
    Polymer({
      is: "#{name}-create",
      
      properties: {
        keys: {
          type: String,
          readOnly: true,
          
          //- Jade compiles this into an array like ["name", "age"]
          value: [!{Object.keys(writable_attributes).map(key => `"${key}"`)}]
        },
        xhr_headers: {
          type: Object,
          notify: true,
          computed: "_xhr_headers(keys)"
        },
        
        request_element: {
          type: Object,
          notify: true,
          value: function() {
            return this.$.req
          }
        }
      },
      
      _filter_options: function _filter_options(event) {
        //- Get the typed value.
        var value = (event.detail.value || "").trim().toLowerCase()
        
        //- Get the related data.
        var target_data = this.get(event.target.getAttribute("relation"))
        
        //- If no value found, show a list.
        if (value === "") {
          return event.target.options = this._optionated_results(target_data)
        }
        
        //- Check we have what we need.
        if (!value || !target_data) {
          event.target.options = []
        }
        else {
          //- Show options that match what we typed.
          event.target.options = this._optionated_results(target_data)
            .filter(function options_filter(option) {
              return option.name.toLowerCase().indexOf(value) >= 0
            })
        }
      },
      
      _xhr_headers: function get_xhr_headers() {
        return window.app.get("headers")
      },
      
      created_callback: function created_callback(event) {
        //- Create an alert to show success.
        var toast = document.createElement("paper-toast")
        
        //- When the request finishes,
        // get whether it errored or 
        // whether it was successful.
        event.detail.completes
          .then(function(data) {
            //- Create a happy notification.
            toast.text = "Success! Sending you to your new " + data.response.data.type + " now."
            document.body.appendChild(toast)
            toast.open()
            
            //- Go to the newly created resource.
            document.querySelector("app-router").go("/#{name}/" + data.response.data.id, {replace: true})
          }.bind(this))
          .catch(function (error) {
            //- Create a happy notification.
            toast.text = "Something bad happened while trying to create your #{name}."
            document.body.appendChild(toast)
            toast.open()
          }.bind(this))
      },
      
      /**
       * Make the response from the server a valid 
       * option for the paper-select options value.
       * 
       * @param  {Object} results from the server.
       * @return {Array -> Object} Array of valid options for paper-select.
       */
      _optionated_results: function _optionated_results(results) {     
        //- Loop over the data we got back from the server.
        return results.data.map(function results_map(result) {
          //- Find the first string type we can.
          var target = Object.keys(result.attributes)
            .filter(function attributes_filter(attribute) {
              return typeof result.attributes[attribute] == "string"
            })[0]
          
          //- Return an object for the options.
          return {
            id: result.id,
            
            //- Just select the first string we find.
            name: result.attributes[target]
          }
        })
      },
      
      /**
       * Loop over the properties we have inputs for
       * and create the payload for Multicolour.
       * 
       * Most of the time, you'll want to customise
       * this and that negates the need for the keys
       * property and this loop.
       * 
       * @return {void}
       */
      _submit_new: function _submit_new() {
        this.$.form.submit()
        //- Get the target.
        //- var target = this.$.req
        //- 
        //- //- Body is null by default, make it an object.
        //- target.body = document.querySelector("form").serialize()
      }
    })
